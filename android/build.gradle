apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'idea'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'


buildscript {
    ext.kotlin_version = '1.3.71'
    ext.jna_version = '5.6.0'
    ext.android_gradle_plugin_version = '3.6.0'
    ext.android_components_version = '47.0.0'

    ext.build = [
            ndkVersion: "21.3.6528147", // Keep it in sync in TC Dockerfile.
            compileSdkVersion: 29,
            targetSdkVersion: 28,
            minSdkVersion: 21, // So that we can publish for aarch64.
            // This is required to support new AndroidX support libraries.
            // See mozilla-mobile/android-components#842
            jvmTargetCompatibility: "1.8",
    ]

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://maven.mozilla.org/maven2"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_gradle_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Publish.
        classpath 'digital.wup:android-maven-publish:3.6.2'

        // rust-android-gradle needed to run cargo build
        classpath 'gradle.plugin.org.mozilla.rust-android-gradle:plugin:0.8.3'

        // Yes, this is unusual.  We want to access some host-specific
        // computation at build time.
        classpath "net.java.dev.jna:jna:$jna_version"

    }
}

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest "net.java.dev.jna:jna:$jna_version@jar"
    implementation "net.java.dev.jna:jna:$jna_version@aar"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    kotlin_version
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // This is required to support new AndroidX support libraries.
    // See mozilla-mobile/android-components#842
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                showStandardStreams = true
            }

            maxHeapSize = "1024m"
        }

        unitTests {
            includeAndroidResources = true
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://maven.mozilla.org/maven2"
        }
    }

    dependencies {
        implementation fileTree(dir: "libs", include: ["*.jar"])
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        testImplementation 'junit:junit:4.12'
        implementation "net.java.dev.jna:jna:$jna_version@aar"
    }
}

// Avoid Gradle namespace collision.  This is here, rather than in `buildscript
// { ... }`, to avoid issues with importing.
import com.sun.jna.Platform as DefaultPlatform

ext.rustTargets = [
        'arm',
        'arm64',
        'x86_64',
        'x86',
]

// Generate libs for our current platform so we can run unit tests.
switch (DefaultPlatform.RESOURCE_PREFIX) {
    case 'darwin':
        ext.rustTargets += 'darwin'
        break
    case 'linux-x86-64':
        ext.rustTargets += 'linux-x86-64'
        break
    case 'win32-x86-64':
        ext.rustTargets += 'win32-x86-64-msvc'
        break
}

cargo {
    // The directory of the Cargo.toml to build.
    module = '../experiments'

    // The Android NDK API level to target.
    apiLevel = 29

    // Where Cargo writes its outputs.
    targetDirectory = '../target'

    // This is the name of the library that the kotlin code
    // *must* use to import the native code
    libname = 'nimbus'

    // The Cargo targets to invoke.  The mapping from short name to target
    // triple is defined by the `rust-android-gradle` plugin.
    targets = rustTargets

    // Perform release builds (which should have debug info, due to
    // `debug = true` in Cargo.toml).
    profile = "release"

    extraCargoBuildArguments = []
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.libraryVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["merge${productFlavor}${buildType}JniLibFolders"].dependsOn(tasks["cargoBuild"])
    }
}

// We also do the binding generation here:
android.libraryVariants.all { variant ->
    def t = tasks.register("generate${variant.name.capitalize()}UniffiBindings", Exec) {
        workingDir "${project.projectDir}"
        // Runs the bindings generation, note that you must have uniffi-bindgen installed and in your PATH environment variable
        commandLine 'uniffi-bindgen', 'generate', '../experiments/src/nimbus.idl', '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/${variant.name}/java"
    }
    variant.javaCompileProvider.get().dependsOn(t)
    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
    // XXX: I've been trying to make this work but I can't, so the compiled bindings will show as "regular sources" in Android Studio.
    idea.module.generatedSourceDirs += file("${buildDir}/generated/source/uniffi/${variant.name}/java/uniffi")
}

allprojects {
    group = "uniffi"
    apply plugin: 'digital.wup.android-maven-publish'

    // This allows to invoke Gradle like `./gradlew publishToRootProjectBuildDir` (equivalent to
    // `./gradlew publish`) and also `./gradlew publishToProjectBuildDir`.
    publishing {
        repositories {
            maven {
                name = "rootProjectBuildDir"
                url "file://${project.rootProject.buildDir}/maven"
            }
            maven {
                name = "projectBuildDir"
                url "file://${project.buildDir}/maven"
            }
        }
    }
}

apply from: "./publish.gradle"

ext.configurePublish(configurations.jnaForTest)

